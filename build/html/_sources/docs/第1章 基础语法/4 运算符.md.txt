# 1.4 运算符

## 1、算数运算符

1. 两个小数不能做取模运算；
| 运算符         | 描述                                                                                  | 实例             |
| -------------- | ------------------------------------------------------------------------------------- | ---------------- |
| +              | 把两个操作数相加                                                                      | A + B 将得到 30  |
| -              | 从第一个操作数中减去第二个操作数                                                      | A - B 将得到 -10 |
| *              | 把两个操作数相乘                                                                      | A * B 将得到 200 |
| /              | 分子除以分母                                                                          | B / A 将得到 2   |
| %              | 取模运算符，整除后的余数                                                              | B % A 将得到 0   |
| ++             | [自增运算符](https://www.runoob.com/cplusplus/cpp-increment-decrement-operators.html) |
| ，整数值增加 1 | A++ 将得到 11                                                                         |
| --             | [自减运算符](https://www.runoob.com/cplusplus/cpp-increment-decrement-operators.html) |
| ，整数值减少 1 | A-- 将得到 9                                                                          |


**前置自增和后置自增**

```c
#include <iostream>
using namespace std;
 
int main()
{
   int a = 21;
   int c ;
 
   // a 的值在赋值之前不会自增
   c = a++;   
   cout << "Line 1 - Value of a++ is :" << c << endl ;
 
   // 表达式计算之后，a 的值增加 1
   cout << "Line 2 - Value of a is :" << a << endl ;
 
   // a 的值在赋值之前自增
   c = ++a;  
   cout << "Line 3 - Value of ++a is  :" << c << endl ;
   return 0;
}
```

```
Line 1 - Value of a++ is :21
Line 2 - Value of a is :22
Line 3 - Value of ++a is  :23
```

## 2、赋值运算符
| 算符    | 描述                                                             | 实例                              |
| ------- | ---------------------------------------------------------------- | --------------------------------- |
| =       | 简单的赋值运算符，把右边操作数的值赋给左边操作数                 | C = A + B 将把 A + B 的值赋给 C   |
| +=      | 加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数 | C += A 相当于 C = C + A           |
| -=      | 减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数 | C -= A 相当于 C = C - A           |
| *=      | 乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数 | C _= A 相当于 C = C _ A           |
| /=      | 除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数 | C /= A 相当于 C = C / A           |
| %=      | 求模且赋值运算符，求两个操作数的模赋值给左边操作数               | C %= A 相当于 C = C % A           |
| <<=     | 左移且赋值运算符                                                 | C <<= 2 等同于 C = C << 2         |
| >>=     | 右移且赋值运算符                                                 | C >>= 2 等同于 C = C >> 2         |
| &=      | 按位与且赋值运算符                                               | C &= 2 等同于 C = C & 2           |
| ^=      | 按位异或且赋值运算符                                             | C ^= 2 等同于 C = C ^ 2           |
| &#124;= | 按位或且赋值运算符                                               | C &#124;= 2 等同于 C = C &#124; 2 |


```c
#include<iostream>
using namespace std;

int main() {
	int a = 8;
	a >>= 2;	// 等于8/2^2
	cout << "a = " << a << endl;

	system("pause");
	return 0;
}
```

## 3、比较运算符

1. 输出时加括号；`(a==b);`
2. 计算时可加可不加；
| 运算符 | 描述                                                           | 实例              |
| ------ | -------------------------------------------------------------- | ----------------- |
| ==     | 检查两个操作数的值是否相等，如果相等则条件为真。               | (A == B) 不为真。 |
| !=     | 检查两个操作数的值是否相等，如果不相等则条件为真。             | (A != B) 为真。   |
| >      | 检查左操作数的值是否大于右操作数的值，如果是则条件为真。       | (A > B) 不为真。  |
| <      | 检查左操作数的值是否小于右操作数的值，如果是则条件为真。       | (A < B) 为真。    |
| >=     | 检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。 | (A >= B) 不为真。 |
| <=     | 检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。 | (A <= B) 为真。   |


```c
#include<iostream>
using namespace std;

int main() {
	int a = 8;
	int b = 10;
	cout << (a==b) << endl;
	bool c = a != b;
	cout << c << endl;
	system("pause");
	return 0;
}
```

```
line 1:0
line 2:1
```

## 4、逻辑运算符

假设变量 A 的值为 1，变量 B 的值为 0，则：

| 运算符       | 描述                                                                                       | 实例                         |
| ------------ | ------------------------------------------------------------------------------------------ | ---------------------------- |
| &&           | 称为逻辑与运算符。如果两个操作数都 true，则条件为 true。                                   | (A && B) 为 false。          |
| &#124;&#124; | 称为逻辑或运算符。如果两个操作数中有任意一个 true，则条件为 true。                         | (A &#124;&#124; B) 为 true。 |
| !            | 称为逻辑非运算符。用来逆转操作数的逻辑状态，如果条件为 true 则逻辑非运算符将使其为 false。 | !(A && B) 为 true。          |
