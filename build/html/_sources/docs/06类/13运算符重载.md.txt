# 运算符重载
运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型；

## 1、加号运算符重载

**成员函数重载**
```c
class Person
{
public:
	Person operator+(Person& p)
	{
		Person temp;
		temp.a = this->a + p.a;
		temp.b = this->b + p.b;
		return temp;
	}
	int a;
	int b;
};
```
**全局函数重载**
```c
// 全局函数重载
Person operator+(Person& p1, Person& p2)
{
	Person temp;
	temp.a = p1.a + p2.a;
	temp.b = p1.b + p2.b;
	return temp;
}
```
**函数重载**
可以使不同类型的数据相加重载
```c
Person operator+(Person& p1, Person& p2)
{
	Person temp;
	temp.a = p1.a + p2.a;
	temp.b = p1.b + p2.b;
	return temp;
}
Person operator+(Person& p1, int num)
{
	Person temp;
	temp.a = p1.a + num;
	temp.b = p1.b + num;
	return temp;
}
```
```c
Person p3 = p1 + p2;
	Person p4 = p1 + 20;
	cout << "p3信息：\t" << p3.a <<"\t" << p3.b << endl;
	cout << "p4信息：\t" << p4.a <<"\t" << p4.b << endl;
```
**代码**
```c
#include<iostream>
using namespace std;
class Person
{
public:
	//成员函数重载
	/*Person operator+(Person& p)
	{
		Person temp;
		temp.a = this->a + p.a;
		temp.b = this->b + p.b;
		return temp;
	}*/
	int a;
	int b;
};
// 全局函数重载
Person operator+(Person& p1, Person& p2)
{
	Person temp;
	temp.a = p1.a + p2.a;
	temp.b = p1.b + p2.b;
	return temp;
}
Person operator+(Person& p1, int num)
{
	Person temp;
	temp.a = p1.a + num;
	temp.b = p1.b + num;
	return temp;
}
void test01()
{
	Person p1;
	p1.a = 10;
	p1.b = 10;
	Person p2;
	p2.a = 10;
	p2.b = 10;
	Person p3 = p1 + p2;
	Person p4 = p1 + 20;
	cout << "p3信息：\t" << p3.a <<"\t" << p3.b << endl;
	cout << "p4信息：\t" << p4.a <<"\t" << p4.b << endl;
}
int main()
{
	test01();
}
```
> 内置数据类型不能发生重载
> 
## 2、左移运算符重载
直接输出想要的内容，比如直接输出对象p；
![](https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20220405160714704.png#crop=0&crop=0&crop=1&crop=1&id=uRS6W&originHeight=511&originWidth=942&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)
> 左移运算符重载只能写在全局函数内
```c
// 只能在全局函数中实现 
void operator<<(ostream &cout, Person &p)	//可以简化成 cout << p
{
	cout << "a为" << p.a << " b为" << p.b << endl;
}
```
![](https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20220405161456261.png#crop=0&crop=0&crop=1&crop=1&id=XkpG1&originHeight=584&originWidth=1250&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)
**链式思想**
```c
ostream& operator<<(ostream &cout, Person &p)	//可以简化成 cout << p
{
	cout << "a为" << p.a << " b为" << p.b << endl;
	return cout;
}
```
![](https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20220405161742086.png#crop=0&crop=0&crop=1&crop=1&id=QLeT4&originHeight=593&originWidth=1377&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)

## 3、递增运算符重载
1. 应该定义前置运算符和后置运算符；
2. 定义为类的成员；
3. 前置运算符重载应返回引用，后置运算符重载返回值；
**两种形式**
类内
```c
class MyInter
{
public:
	MyInter& operator++()
	{
		num++; 
		return *this;
	}
private:
	int num;
};
```
作用域
```c
MyInter& MyInter::operator++()
{
	num++;
	return *this;
}
```
**前置递增运算符**
```c
MyInter& operator++()
	{
		num++; 
		return *this;//返回自身MyInter数据类型
	}
```
**后置递增运算符**
```c
MyInter operator++(int)
	{
		MyInter temp = *this;//创建临时变量保存当前值用作返回
		num++;
		return temp;
	}
```
**代码**
```c
#include<iostream>
using namespace std;
class MyInter
{
	friend ostream& operator<<(ostream& cout, MyInter Inter);
public:
	MyInter()
	{
		num = 0;
	}
	// 重载++运算符
	// 1.重载前置递增运算符
	MyInter& operator++()
	{
		num++; 
		return *this;//返回自身MyInter数据类型
	}
	// 2.后置递增运算符
	// int表示占位参数，可用于区分前置和后置递增  只能写int，写double等不行
	MyInter operator++(int)
	{
		MyInter temp = *this;//创建临时变量
		num++;
		return temp;
	}
private:
	int num;
};
MyInter& MyInter::operator++()
{
	num++;
	return *this;//返回自身MyInter数据类型
}
//定义左移运算符重载
ostream& operator<<(ostream& cout, MyInter Inter)
{
	cout << "输出为：" << Inter.num << endl;
	return cout;
}
// 前置运算符重载测试
void test01()
{
	MyInter Inter;
	cout << ++(++Inter) << endl;
	cout << Inter << endl;
}
// 后置运算符重载测试
void test02()
{
	MyInter Inter;
	cout << Inter++<< endl;
	cout << Inter << endl;
}
int main()
{
	test02();
}
```
## 4、赋值运算符重载
编译器提供的拷贝默认是浅拷贝的操作，在析构函数中释放内存是容易引发问题。
**没有写析构函数释放内存时**
```c
#include<iostream>
using namespace std;
class Person
{
public:
	Person(int a)
	{
		this->a = new int(a); //在堆中开辟一块内存区间
	}
	int *a;
};
void test01()
{
	Person p1(18);
	Person p2(20);
	p2 = p1;
	cout << "p1中a=" << *p1.a << endl;
	cout << "p2中a=" << *p2.a << endl;
}
int main()
{
	test01();
}
```
正常输出
**加上析构函数**
```c
~Person()
{
  if (a != NULL) {
    delete a;
    a = NULL;
  }
}
```
程序会崩掉
原因：在进行拷贝时，`p2 = p1`操作时，因为类里的a为地址，编译器会直接将p1中a的地址直接拷贝给p2中的a，而析构函数在释放内存时会释放两次相同的内存，就会引发错误；
![](https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20220405200022099.png#crop=0&crop=0&crop=1&crop=1&id=CCTwI&originHeight=709&originWidth=942&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)
**重载=**
我们需要进行赋值运算符重载，将编译器默认的浅拷贝覆盖为深拷贝；
![](https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20220405200516414.png#crop=0&crop=0&crop=1&crop=1&id=fhG56&originHeight=835&originWidth=1399&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)
```c
Person& operator=(Person &p)
	{
		this->a = new int(*p.a);
		return *this;
	}
```
返回&引用可以进行链式操作
**代码**
```c
#include<iostream>
using namespace std;
class Person
{
public:
	Person(int a)
	{
		this->a = new int(a);
	}
	~Person()
	{
		if (a != NULL) {
			delete a;
			a = NULL;
		}
	}
	Person& operator=(Person &p)
	{
		this->a = new int(*p.a);
		return *this;
	}
	int *a;
};
void test01()
{
	Person p1(18);
	Person p2(20);
	Person p3(30);
	p3 = p2 = p1;
	cout << "p1中a=" << *p1.a << endl;
	cout << "p2中a=" << *p2.a << endl;
	cout << "p3中a=" << *p3.a << endl;
}
int main()
{
	test01();
}
```
## 5、关系运算符重载
两个自定义类型对象进行对比
**重载==**
```c
bool operator==(Person& p)
	{
		if (this->name == p.name && this->age == p.age) {
			return true;
		}
		return false;
	}
```
`test()`
```c
Person p1("Tom", 18);
Person p2("Tom", 18);
if (p1 == p2)
{
  cout << "两人一样" << endl;
}
else
{
  cout << "两人不一样" << endl;
}
```
**也可以重载不等于！=**
```c
bool operator!=(Person& p)
	{
		if (this->name != p.name || this->age != p.age) {
			return true;
		}
		return false;
	}
```
> 这两个运算符都不能采用作用域的方式，因为类本身没有`operator==()`和`operator!=()`函数，只有`operator=()`函数。

**代码**
```c
#include<iostream>
using namespace std;
class Person
{
public:
	Person(string _name,int _age):name(_name),age(_age){}
	bool operator==(Person& p)
	{
		if (this->name == p.name && this->age == p.age) {
			return true;
		}
		return false;
	}
	bool operator!=(Person& p)
	{
		if (this->name != p.name || this->age != p.age) {
			return true;
		}
		return false;
	}
	string name;
	int age;
};
void test01()
{
	Person p1("Tom", 18);
	Person p2("Tom", 18);
	if (p1 == p2)
	{
		cout << "两人一样" << endl;
	}
	else
	{
		cout << "两人不一样" << endl;
	}
	if (p1 != p2)
	{
		cout << "两人不一样" << endl;
	}
	else
	{
		cout << "两人一样" << endl;
	}
}
int main()
{
	test01();
}
```
## 6、函数调用运算符重载
伪函数
```c
void operator()(string str)
	{
		cout << str << endl;
	}
```
```c
PrintString p;
p("你好");
```
> 这个相当于伪函数，和类内函数不同的是我可以直接传值使用，不需要p.函数名()，有点类似于静态成员函数。
利用这个规则，可以把类当成函数用。
**匿名函数对象**
这里`PrintString()`相当于创建一个匿名对象，之后的（"你不好"）相当于调用函数；
```c
//匿名函数对象
PrintString()("你不好");
```

## 7、表运算符重载
重载下表运算符[]，操作对象中的数组像操作普通数组一样，<u>必须以成员函数的形式重载</u>。
语法：```返回值类型 &operator[](参数)```
或者```const 返回值类型 &operator[](参数) const```
第一种可访问可修改，第二种可访问不可修改
正常写法
```c++
// 获取男朋友信息   这里返回引用可以修改
string& getBoys(int i)
{
    return m_boys[i];
}
// main函数中
girl1.getBoys(1) = "白";
cout << girl1.getBoys(1) << endl;
```
重载后
```c++
string& operator[](int i)
{
    return m_boys[i];
}
// 访问
girl1[1] = "立着";
cout << girl1[1] << endl;
```
直接访问对象的[]即可
全部代码
```c++
#include<iostream>
using std::string; using std::cout; using std::endl;
class SuperGirl
{
public:
	string m_name;
	SuperGirl()
	{
		m_boys[0] = "自读";
		m_boys[1] = "潘安";
		m_boys[2] = "宋玉";
	}
	// 获取男朋友信息   这里返回引用可以修改
	//string& getBoys(int i)
	//{
	//	return m_boys[i];
	//}
	string& operator[](int i)
	{
		return m_boys[i];
	}
	// 显示全部男友
	void showBoys()
	{
		cout << "第一任男朋友：" << m_boys[0] << endl;
		cout << "第二任男朋友：" << m_boys[1] << endl;
		cout << "第三任男朋友：" << m_boys[2] << endl;
	}
private:
	string m_boys[3]; // 男朋友
};
int main()
{
	SuperGirl girl1;
	girl1.showBoys();
	//girl1.getBoys(1) = "白";
	//cout << girl1.getBoys(1) << endl;
	// 访问
	girl1[1] = "立着";
	cout << girl1[1] << endl;
	system("pause");
	return 0;
}
```
## 8、运算符new&delete重载
1. 不管是整数还是类，只要用到new和delete都会重载；
2. 若需要类调用重载函数，只需要将重载函数放在类中即可。
重载需要用到c语言中的malloc和free函数
```c++
#include<iostream>
using std::string; using std::cout; using std::endl;
void* operator new(size_t size)
{
	cout << "调用了重载的new：" << size << "字节。" << endl;
	void* ptr = malloc(size);
	cout << "申请到的地址是：" << ptr << endl;
	return ptr;
}
void operator delete(void* ptr)
{
	cout << "调用了重载的delete：" << endl;
	if (ptr == 0) return; // 对空指针delete安全
	free(ptr);
}
int main()
{
	int* p1 = new int(3); // 创建并初始化为3
	cout << "p1=" << (void*)p1 << "\t*p1=" << *p1 << endl;
	delete p1;
	system("pause");
	return 0;
}
```
![image-20221023164343123](http://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20221023164343123.png)
类申请空间
```c++
#include<iostream>
using std::string; using std::cout; using std::endl;
class SuperGirl
{
public:
	SuperGirl(int c_xw,int c_yw)
	{
		cout << "调用了构造函数" << endl;
		m_xw = c_xw;
		m_yw = c_yw;
	};
	~SuperGirl()
	{
		cout << "调用了析构函数" << endl;
	}
	int m_xw;
	int m_yw;
};
void* operator new(size_t size)
{
	cout << "调用了重载的new：" << size << "字节。" << endl;
	void* ptr = malloc(size);
	cout << "申请到的地址是：" << ptr << endl;
	return ptr;
}
void operator delete(void* ptr)
{
	cout << "调用了重载的delete：" << endl;
	if (ptr == 0) return; // 对空指针delete安全
	free(ptr);
}
int main()
{
	//int* p1 = new int(3); // 创建并初始化为3
	//cout << "p1=" << (void*)p1 << "\t*p1=" << *p1 << endl;
	//delete p1;
	SuperGirl *girl1 = new SuperGirl(10, 20);
	cout << "girl1的地址是：" << girl1 << "\t胸围是：" << girl1->m_xw << "\t腰围是：" << girl1->m_yw << endl;
	delete girl1;
	system("pause");
	return 0;
}
```
![image-20221023164909269](http://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20221023164909269.png)
<strong style="color:#c00000;">内存池的概念</strong>
程序刚开始时预先申请好的一块内存空间。
比如一个类的大小为8，w偶们可以预先申请好16个大小的内存空间，足够放两个对象。当创建对象需要申请内存时，优先从内存池中申请，内存池不够了再向系统申请。
<u>技巧：每一块小内存池空出一个字节来表示该块内存是否被占用。</u>
比如案例中，内存池可以存放2个对象，每个对象8字节，本来要申请16字节足够，这里申请18个字节。
![image-20221023173200977](http://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20221023173200977.png)

```c++
#include<iostream>
using std::string; using std::cout; using std::endl;
class SuperGirl
{
public:
	int m_xw;
	int m_yw;
	static char* m_pool; // 创建一个内存池
	SuperGirl(int c_xw, int c_yw)
	{
		cout << "调用了构造函数" << endl;
		m_xw = c_xw;
		m_yw = c_yw;
	};
	static bool initPool()
	{
		m_pool = (char*)malloc(18); // 向系统申请18字节作为内存池
		if (m_pool == 0) return false; // 申请内存失败
		memset(m_pool, 0, 18); // 内存地址初始化为空
		cout << "内存池的起始位置时：" << (void*)m_pool << endl;
		return true;
	}
	static void freePool()
	{// 释放内存池
		if (m_pool == 0) return; // 如果内存池为空，则返回
		free(m_pool); // 释放内存池
		cout << "内存池已经释放" << endl;
		return;
	}
	void* operator new(size_t size)
	{
		if (m_pool[0] == 0) // 判断第一块位置是否空闲
		{
			cout << "分配第一块内存：" << (void*)(m_pool + 1) << endl;
			m_pool[0] = 1;
			return m_pool+1;
		}
		if (m_pool[9] == 0) // 判断第二块位置是否空闲
		{
			cout << "分配第二块内存：" << (void*)(m_pool + 9) << endl;
			m_pool[9] = 1;
			return m_pool+9;
		}
		// 如果内存池已满，则向系统申请空间
		cout << "调用了重载的new：" << size << "字节。" << endl;
		void* ptr = malloc(size);
		cout << "申请到的地址是：" << ptr << endl;
		return ptr;
	}
	void operator delete(void* ptr)
	{
		cout << "调用了重载的delete：" << endl;
		if (ptr == 0) return;  // 对空指针delete安全
		if (ptr == m_pool + 1) // 判断是否为内存池的第一块内存
		{
			cout << "释放第一块内存" << endl;
			m_pool[0] = 0;
			return;
		}
		if (ptr == m_pool + 9) // 判断是否为内存池的第二块内存
		{
			cout << "释放第二块内存" << endl;
			m_pool[9] = 0;
			return;
		}
		free(ptr); // 释放内存池或系统内存
	}
	~SuperGirl()
	{
		cout << "调用了析构函数" << endl;
	}
};
char* SuperGirl::m_pool = 0; // 初始化内存池指针
int main()
{
	// 初始化内存池分配空间
	if (SuperGirl::initPool() == false)
	{
		cout << "初始化内存池失败" << endl;
		return -1;
	}
	SuperGirl* girl1 = new SuperGirl(10, 20);
	cout << "girl1的地址是：" << girl1 << "\t胸围是：" << girl1->m_xw << "\t腰围是：" << girl1->m_yw << endl;
	SuperGirl* girl2 = new SuperGirl(10, 20);
	cout << "girl2的地址是：" << girl2 << "\t胸围是：" << girl2->m_xw << "\t腰围是：" << girl2->m_yw << endl;
	SuperGirl* girl3 = new SuperGirl(10, 20);
	cout << "girl3的地址是：" << girl3 << "\t胸围是：" << girl3->m_xw << "\t腰围是：" << girl3->m_yw << endl;
	delete girl1;
	SuperGirl* girl4 = new SuperGirl(10, 20);
	cout << "girl4的地址是：" << girl4 << "\t胸围是：" << girl1->m_xw << "\t腰围是：" << girl4->m_yw << endl;
	delete girl2;
	delete girl3;
	delete girl4;
	system("pause");
	return 0;
}
```

![image-20221023173223124](http://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/image-20221023173223124.png)