# 13.2 智能指针

1. `std::unique_ptr<T>`：独占资源所有权的指针。
2. `std::shared_ptr<T>`：共享资源所有权的指针。
3. `std::weak_ptr<T>`：共享资源的观察者，需要和 std::shared_ptr 一起使用，不影响资源的生命周期。

## 1、std::unique_ptr
当我们独占资源的所有权时，可使用 std::unique_ptr 对资源进行管理。唯一拥有指向动态分配对象的指针，且在其生命周期结束时自动释放指向的对象。std::unique_ptr 使用简单，也是用得比较多的智能指针。

**操作方式**
1. 可以使用new运算符分配内存；
2. 可以使用release()方法释放对象所有权，以便将其转移给另一个unique_ptr或其他类型的智能指针。
3. 可以使用get()方法获取指向原始指针的指针
4. 可以使用reset()方法释放指针并指向另一个对象。

当我们使用c++ new 动态分配内存时，容易忘掉释放内存造成内存泄漏，可以使用unique_ptr管理动态分配内存。
```c++
  unique_ptr<int> p(new int(5));
  cout << *p << endl;
```
> 无须释放p

**初始化方式**

共有2种
```c++
int main(){
  // unique_ptr初始化
  // 方式一
  unique_ptr<int> p(new int(5));
  cout << *p << endl;
  // 方式二
  unique_ptr<int> p1 = make_unique<int>(3);
  cout << *p1 <<endl;

  system("pause");
  return 0;
}
```

**不能转移**

```c++
int main()
{
  unique_ptr<int> uptr = make_unique<int>(10);
  unique_ptr<int> uptr1 = uptr; // 编译错误
  unique_ptr<int> uptr2 = move(uptr);
  cout << (uptr == uptr2) <<endl; // 输出 0

  system("pause");
  return 0;
}
```

**指向一个数组**
```c++
int main()
{
  std::unique_ptr<int[]> uptr = std::make_unique<int[]>(10);
  for (int i = 0; i < 10; i++) {
      uptr[i] = i * i;
  }   
  for (int i = 0; i < 10; i++) {
      std::cout << uptr[i] << std::endl;
  }   

  system("pause");
  return 0;
}
```
输出

![](https://test-123456-md-images.oss-cn-beijing.aliyuncs.com/img/20230407235242.png)

## 2、std::shared_ptr
使用std::shared_ptr可以避免常见的内存管理问题，例如内存泄漏和悬空指针。它通过引用**计数**的方式来跟踪动态分配内存的所有者。每当一个新的std::shared_ptr被创建时，内部的引用计数会增加。当std::shared_ptr被销毁时，引用计数会减少。只有当引用计数降为零时，内存才会自动释放。

```c++
#include <memory>
#include <iostream>

class MyClass {
public:
    MyClass() {
        std::cout << "MyClass constructed." << std::endl;
    }
    ~MyClass() {
        std::cout << "MyClass destructed." << std::endl;
    }
    void doSomething() {
        std::cout << "Doing something." << std::endl;
    }
};

int main() {
    // 创建一个std::shared_ptr来管理MyClass对象
    std::shared_ptr<MyClass> ptr(new MyClass);

    // 使用箭头运算符来访问MyClass对象的成员函数
    ptr->doSomething();

    // 另外一个std::shared_ptr也可以指向同一个MyClass对象
    std::shared_ptr<MyClass> ptr2 = ptr;

    // 此时，MyClass对象的引用计数为2

    return 0;
}
```
